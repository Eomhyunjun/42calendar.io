{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pi/42calendar.io/front/src/MyCalendar.js\";\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport koLocale from '@fullcalendar/core/locales/ko';\nimport { INITIAL_EVENTS } from './event-utils';\nimport { createEventId } from './CreateEventId';\nimport PopUp from './Popup_2';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default class MyCalendar extends React.Component {\n  constructor() {\n    super(); // this is required\n\n    this.togglePop = selectInfo => {\n      console.log(selectInfo);\n      this.setState({\n        startStr: selectInfo.startStr,\n        endStr: selectInfo.endStr,\n        sel: selectInfo\n      });\n      this.setState({\n        seen: !this.state.seen\n      });\n    };\n\n    this.openCurret = (clickEvent, a, b, c) => {\n      console.log({\n        clickEvent,\n        a,\n        b,\n        c\n      });\n      const {\n        event\n      } = clickEvent;\n      const {\n        endStr,\n        startStr\n      } = clickEvent.event;\n      console.log({\n        endStr,\n        startStr\n      });\n      this.setState({\n        startStr,\n        endStr,\n        contents: event.extendedProps.description,\n        title: event.title,\n        // startStr: moment(startStr).format('YYYY-MM-DD'),\n        // endStr:  moment(endStr).format('YYYY-MM-DD'),\n        sel: clickEvent.view\n      });\n      this.setState({\n        seen: !this.state.seen\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEventClick = clickInfo => {\n      if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n\n    this.state = {\n      currentEvent: [],\n      seen: false,\n      startStr: 20201010,\n      endStr: 20201010,\n      sel: ''\n    };\n    this.handleDateSelect = this.handleDateSelect.bind(this.selectInfo);\n\n    const formatEnd = function (end) {\n      const splitted = end.split('-');\n      const newnum = parseInt(splitted[2], 10) + 1;\n      return `${splitted[0]}-${splitted[1]}-${newnum}`;\n    };\n\n    this.getData = function (a, b, c) {\n      // console.log({start, end, timezone, callback})\n      const data = axios.get('https://sheetdb.io/api/v1/mr4ghbp4mbpcz').then(data => {\n        console.log(data);\n        const formatted = data.data.map(item => {\n          return { ...item,\n            id: createEventId(),\n            title: item.id,\n            end: formatEnd(item.end),\n            description: item.contents\n          };\n        });\n        console.log(formatted);\n        b(formatted);\n      }); // return data;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-main\",\n        children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n          headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: ''\n          },\n          contentHeight: \"80vh\",\n          initialView: \"dayGridMonth\" //'dayGridMonth', 'dayGridWeek', 'timeGridWeek'\n          ,\n          editable: true,\n          selectable: true,\n          selectMirror: true,\n          dayMaxEvents: true,\n          weekends: true // initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n          // initialEvents={this.getData()} // alternatively, use the `` setting to fetch from a feed\n          ,\n          events: this.getData,\n          select: this.togglePop //select={this.handleDateSelect}\n          ,\n          eventContent: renderEventContent // custom render function\n          ,\n          eventClick: this.openCurret,\n          eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n          /* you can update a remote database when these fire:\n          eventAdd={function(){}}\n          eventChange={function(){}}\n          eventRemove={function(){}}\n          */\n          ,\n          locale: koLocale\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), this.state.seen ? /*#__PURE__*/_jsxDEV(PopUp, {\n          toggle: this.togglePop,\n          start: this.state.startStr,\n          end: this.state.endStr,\n          title: this.state.title,\n          contents: this.state.contents,\n          name_: \"hekang\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 30\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-main_v\",\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin],\n          views: {\n            listDay: {\n              buttonText: '일'\n            },\n            listWeek: {\n              buttonText: '주'\n            },\n            listMonth: {\n              buttonText: '월'\n            }\n          },\n          headerToolbar: {\n            left: '',\n            center: '',\n            right: 'listDay,listWeek,listMonth'\n          },\n          contentHeight: \"80vh\",\n          initialView: \"listWeek\" //'dayGridMonth', 'dayGridWeek', 'timeGridWeek'\n          ,\n          editable: true,\n          selectable: true,\n          selectMirror: true,\n          dayMaxEvents: true,\n          weekends: true,\n          events: this.getData,\n          select: this.togglePop,\n          eventContent: renderEventContent // custom render function\n          ,\n          eventClick: this.handleEventClick,\n          eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n          /* you can update a remote database when these fire:\n          eventAdd={function(){}}\n          eventChange={function(){}}\n          eventRemove={function(){}}\n          */\n          ,\n          locale: koLocale\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/home/pi/42calendar.io/front/src/MyCalendar.js"],"names":["React","FullCalendar","dayGridPlugin","interactionPlugin","timeGridPlugin","listPlugin","koLocale","INITIAL_EVENTS","createEventId","PopUp","axios","moment","MyCalendar","Component","constructor","togglePop","selectInfo","console","log","setState","startStr","endStr","sel","seen","state","openCurret","clickEvent","a","b","c","event","contents","extendedProps","description","title","view","handleDateSelect","prompt","calendarApi","calendar","unselect","addEvent","id","start","end","allDay","handleEventClick","clickInfo","window","confirm","remove","handleEvents","events","currentEvents","currentEvent","bind","formatEnd","splitted","split","newnum","parseInt","getData","data","get","then","formatted","map","item","render","left","center","right","renderEventContent","listDay","buttonText","listWeek","listMonth","eventInfo","timeText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport koLocale from '@fullcalendar/core/locales/ko';\nimport { INITIAL_EVENTS } from './event-utils';\nimport { createEventId } from './CreateEventId';\nimport PopUp from './Popup_2';\nimport axios from 'axios';\nimport moment from 'moment';\n\nexport default class MyCalendar extends React.Component {\n  constructor() {\n    super(); // this is required\n    this.state = {\n      currentEvent: [],\n      seen: false,\n      startStr: 20201010,\n      endStr: 20201010,\n      sel: ''\n    };\n    this.handleDateSelect = this.handleDateSelect.bind(this.selectInfo)\n    const formatEnd = function (end) {\n      const splitted = end.split('-');\n      const newnum = parseInt(splitted[2], 10) + 1;\n\n      return `${splitted[0]}-${splitted[1]}-${newnum}`;\n    };\n    this.getData = function (a, b, c) {\n      // console.log({start, end, timezone, callback})\n      const data = axios.get('https://sheetdb.io/api/v1/mr4ghbp4mbpcz')\n        .then((data) => {\n          console.log(data);\n          const formatted =\n            data.data.map((item) => {\n              return {\n                ...item,\n                id: createEventId(),\n                title: item.id,\n                end: formatEnd(item.end),\n                description: item.contents,\n              };\n            });\n          console.log(formatted);\n          b(formatted);\n        });\n\n      // return data;\n    }\n\n  }\n  render() {\n    return (\n      <div className='app'>\n        <div className='app-main'>\n          <FullCalendar\n            plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin]}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: ''\n            }}\n            contentHeight=\"80vh\"\n            initialView='dayGridMonth'\n            //'dayGridMonth', 'dayGridWeek', 'timeGridWeek'\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            weekends={true}\n            // initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n            // initialEvents={this.getData()} // alternatively, use the `` setting to fetch from a feed\n            events={this.getData}\n            select={this.togglePop}\n            //select={this.handleDateSelect}\n            eventContent={renderEventContent} // custom render function\n            eventClick={this.openCurret}\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n            locale={koLocale}\n          />\n          {this.state.seen ? <PopUp toggle={this.togglePop} start={this.state.startStr} end={this.state.endStr} title={this.state.title} contents={this.state.contents} name_=\"hekang\" /> : null}\n        </div>\n\n        <div className='app-main_v'>\n          <FullCalendar\n            plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin]}\n            views={{\n              listDay: { buttonText: '일' },\n              listWeek: { buttonText: '주' },\n              listMonth: { buttonText: '월' }\n            }}\n            headerToolbar={{\n              left: '',\n              center: '',\n              right: 'listDay,listWeek,listMonth'\n            }}\n            contentHeight=\"80vh\"\n            initialView='listWeek'\n            //'dayGridMonth', 'dayGridWeek', 'timeGridWeek'\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            weekends={true}\n            events={this.getData}\n            select={this.togglePop}\n            eventContent={renderEventContent} // custom render function\n            eventClick={this.handleEventClick}\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n            locale={koLocale}\n          />\n        </div>\n      </div>\n    )\n\n  }\n\n\n  togglePop = (selectInfo) => {\n    console.log(selectInfo);\n    this.setState({\n      startStr: selectInfo.startStr,\n      endStr: selectInfo.endStr,\n      sel: selectInfo\n    }\n    );\n    this.setState({\n      seen: !this.state.seen\n    });\n  };\n\n  openCurret = (clickEvent, a, b, c) => {\n    console.log({ clickEvent, a, b, c })\n    const {event} = clickEvent;\n    const { endStr, startStr } = clickEvent.event;\n    console.log({ endStr, startStr });\n    this.setState({\n      startStr,\n      endStr,\n      contents: event.extendedProps.description,\n      title: event.title,\n            // startStr: moment(startStr).format('YYYY-MM-DD'),\n      // endStr:  moment(endStr).format('YYYY-MM-DD'),\n      sel: clickEvent.view,\n    });\n    this.setState({\n      seen: !this.state.seen,\n    });\n  }\n\n\n  handleDateSelect = (selectInfo) => {\n    let title = prompt('Please enter a new title for your event')\n\n    let calendarApi = selectInfo.view.calendar\n\n    calendarApi.unselect() // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay\n      })\n    }\n\n  }\n\n  handleEventClick = (clickInfo) => {\n    if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      clickInfo.event.remove()\n    }\n  }\n\n  handleEvents = (events) => {\n    this.setState({\n      currentEvents: events\n    })\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return (\n    <>\n      <b>{eventInfo.timeText}</b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  )\n}  "]},"metadata":{},"sourceType":"module"}