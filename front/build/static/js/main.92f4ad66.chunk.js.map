{"version":3,"sources":["event-utils.js","Customerdel.jsx","Customeradd.jsx","MyCalendar.jsx","index.jsx"],"names":["eventGuid","todayStr","Date","toISOString","replace","INITIAL_EVENTS","id","createEventId","title","start","end","color","String","CustomerDelete","props","state","open","handleClickOpen","bind","handleClose","this","setState","fetch","method","stateRefresh","Button","variant","onClick","Dialog","onClose","DialogTitle","DialogContent","Typography","gutterBottom","DialogActions","e","deleteCustomer","React","Component","CustomerAdd","file","userName","birthday","gender","job","fileName","handleFormSubmit","handleFileChange","handleValueChange","addCustomer","preventDefault","then","response","console","log","data","target","files","value","nextState","name","formData","FormData","append","post","headers","classes","className","hidden","accept","type","onChange","htmlFor","component","TextField","label","withStyles","theme","display","MyCalendar","currentEvent","handleDateSelect","selectInfo","prompt","calendarApi","view","calendar","unselect","addEvent","startStr","endStr","allDay","handleEventClick","clickInfo","window","confirm","event","remove","handleEvents","events","currentEvents","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","headerToolbar","left","center","right","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","initialEvents","select","eventContent","renderEventContent","eventClick","eventsSet","locale","koLocale","listPlugin","views","listDay","buttonText","listWeek","listMonth","eventInfo","timeText","document","addEventListener","render","body","appendChild","createElement"],"mappings":"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","file":"static/js/main.92f4ad66.chunk.js","sourcesContent":["\nlet eventGuid = 0\nlet todayStr = new Date().toISOString().replace(/T.*$/, '') // YYYY-MM-DD of today\n\nexport const INITIAL_EVENTS = [\n  {\n    id: createEventId(),\n    title: 'All-day event',\n    start: todayStr\n  },\n  {\n    id: createEventId(),\n    title: 'Timed event',\n    start: todayStr + 'T12:00:00'\n  },\n  {\n    id: createEventId(),\n    title: 'Timed event 2hr',\n    start: todayStr + 'T12:00:00',\n    end: todayStr + 'T14:00:00',\n    color: 'red'\n  }\n]\n\nexport function createEventId() {\n  return String(eventGuid++)\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\n\nclass CustomerDelete extends React.Component {\n\nconstructor(props) {\nsuper(props);\nthis.state = {\nopen: false\n}\nthis.handleClickOpen = this.handleClickOpen.bind(this)\nthis.handleClose = this.handleClose.bind(this);\n}\n\nhandleClickOpen() {\nthis.setState({\nopen: true\n});\n}\nhandleClose() {\nthis.setState({\nopen: false\n})\n}\n\ndeleteCustomer(id){\nconst url = '/api/customers/' + id;\nfetch(url, {\nmethod: 'DELETE'\n});\nthis.props.stateRefresh();\n}\n\nrender() {\nreturn (\n<div>\n<Button variant=\"contained\" color=\"secondary\" onClick={this.handleClickOpen}>\n삭제\n</Button>\n<Dialog onClose={this.handleClose} open={this.state.open}>\n<DialogTitle onClose={this.handleClose}>\n삭제 경고\n</DialogTitle>\n<DialogContent>\n<Typography gutterBottom>\n선택한 고객 정보가 삭제됩니다.\n</Typography>\n</DialogContent>\n<DialogActions>\n<Button variant=\"contained\" color=\"primary\" onClick={(e) => {this.deleteCustomer(this.props.id)}}>삭제</Button>\n<Button variant=\"outlined\" color=\"primary\" onClick={this.handleClose}>닫기</Button>\n</DialogActions>\n</Dialog>\n</div>\n)\n}\n}\n\nexport default CustomerDelete;","import React from 'react'\nimport { post } from 'axios';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\nhidden: {\ndisplay: 'none'\n}\n});\n\nclass CustomerAdd extends React.Component {\n\nconstructor(props) {\nsuper(props);\nthis.state = {\nfile: null,\nuserName: '',\nbirthday: '',\ngender: '',\njob: '',\nfileName: '',\nopen: false\n}\nthis.handleFormSubmit = this.handleFormSubmit.bind(this)\nthis.handleFileChange = this.handleFileChange.bind(this)\nthis.handleValueChange = this.handleValueChange.bind(this)\nthis.addCustomer = this.addCustomer.bind(this)\nthis.handleClickOpen = this.handleClickOpen.bind(this)\nthis.handleClose = this.handleClose.bind(this);\n}\n\nhandleFormSubmit(e) {\ne.preventDefault()\nthis.addCustomer()\n.then((response) => {\nconsole.log(response.data);\nthis.props.stateRefresh();\n})\nthis.setState({\nfile: null,\nuserName: '',\nbirthday: '',\ngender: '',\njob: '',\nfileName: '',\nopen: false\n})\n}\n\nhandleFileChange(e) {\nthis.setState({\nfile: e.target.files[0],\nfileName: e.target.value\n});\n}\nhandleValueChange(e) {\nlet nextState = {};\nnextState[e.target.name] = e.target.value;\nthis.setState(nextState);\n}\n\naddCustomer(){\nconst url = '/api/customers';\nconst formData = new FormData();\nformData.append('image', this.state.file)\nformData.append('name', this.state.userName)\nformData.append('birthday', this.state.birthday)\nformData.append('gender', this.state.gender)\nformData.append('job', this.state.job)\nconst config = {\nheaders: {\n'content-type': 'multipart/form-data'\n}\n}\nreturn post(url, formData, config)\n}\n\nhandleClickOpen() {\nthis.setState({\nopen: true\n});\n}\n\nhandleClose() {\nthis.setState({\nfile: null,\nuserName: '',\nbirthday: '',\ngender: '',\njob: '',\nfileName: '',\nopen: false\n})\n}\n\nrender() {\nconst { classes } = this.props;\nreturn (\n<div>\n<Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>\n고객 추가하기\n</Button>\n<Dialog open={this.state.open} onClose={this.handleClose}>\n<DialogTitle>고객 추가</DialogTitle>\n<DialogContent>\n<input className={classes.hidden} accept=\"image/*\" id=\"raised-button-file\" type=\"file\" file={this.state.file} value={this.state.fileName} onChange={this.handleFileChange} />\n<label htmlFor=\"raised-button-file\">\n<Button variant=\"contained\" color=\"primary\" component=\"span\" name=\"file\">\n{this.state.fileName === ''? \"프로필 이미지 선택\" : this.state.fileName}\n</Button>\n</label><br/>\n<TextField label=\"이름\" type=\"text\" name=\"userName\" value={this.state.userName} onChange={this.handleValueChange} /><br/>\n<TextField label=\"생년월일\" type=\"text\" name=\"birthday\" value={this.state.birthday} onChange={this.handleValueChange} /><br/>\n<TextField label=\"성별\" type=\"text\" name=\"gender\" value={this.state.gender} onChange={this.handleValueChange} /><br/>\n<TextField label=\"직업\" type=\"text\" name=\"job\" value={this.state.job} onChange={this.handleValueChange} /><br/>\n</DialogContent>\n<DialogActions>\n<Button variant=\"contained\" color=\"primary\" onClick={this.handleFormSubmit}>추가</Button>\n<Button variant=\"outlined\" color=\"primary\" onClick={this.handleClose}>닫기</Button>\n</DialogActions>\n</Dialog>\n</div>\n)\n}\n}\n\nexport default withStyles(styles)(CustomerAdd)","import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction'\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport koLocale from '@fullcalendar/core/locales/ko';\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\nimport CustomerDelete from './Customerdel'\nimport CustomerAdd from './Customeradd'\n\nexport default class MyCalendar extends React.Component {\n\n    state = {\n        currentEvent: []\n    }\n\n    render() {\n        return (\n          <div className='app'>\n            <div>\n            <CustomerDelete />\n            <CustomerAdd />\n            </div>\n            <div className='app-main'>\n              <FullCalendar\n                plugins={[ dayGridPlugin, interactionPlugin, timeGridPlugin ]}\n                headerToolbar={{\n                    left: 'prev,next today',\n                    center: 'title',\n                    right: 'dayGridMonth,timeGridWeek'\n                }}\n                initialView='dayGridMonth'\n    //'dayGridMonth', 'dayGridWeek', 'timeGridWeek'\n                editable={true}\n                selectable={true}\n                selectMirror={true}\n                dayMaxEvents={true}\n                weekends={true}\n                initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n                select={this.handleDateSelect}\n                eventContent={renderEventContent} // custom render function\n                eventClick={this.handleEventClick}\n                eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n                /* you can update a remote database when these fire:\n                eventAdd={function(){}}\n                eventChange={function(){}}\n                eventRemove={function(){}}\n                */\n                locale={koLocale}       \n              />\n            </div> \n          <div className='app-main_v'>\n            <FullCalendar\n              plugins={[ dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin ]}\n              views={{\n                listDay: { buttonText: '일' },\n                listWeek: { buttonText: '주' },\n                listMonth: { buttonText: '월' }\n              }}\n              headerToolbar={{\n                left: 'title',\n                center: '',\n                right: 'listDay,listWeek,listMonth'\n            }}\n              initialView='listWeek'\n  //'dayGridMonth', 'dayGridWeek', 'timeGridWeek'\n              editable={true}\n              selectable={true}\n              selectMirror={true}\n              dayMaxEvents={true}\n              weekends={true}\n              initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n              select={this.handleDateSelect}\n              eventContent={renderEventContent} // custom render function\n              eventClick={this.handleEventClick}\n              eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n              /* you can update a remote database when these fire:\n              eventAdd={function(){}}\n              eventChange={function(){}}\n              eventRemove={function(){}}\n              */\n              locale={koLocale}       \n            />\n          </div>\n        </div>\n        )\n    }\n\n    \n      handleDateSelect = (selectInfo) => {\n        let title = prompt('Please enter a new title for your event')\n        let calendarApi = selectInfo.view.calendar\n    \n        calendarApi.unselect() // clear date selection\n    \n        if (title) {\n          calendarApi.addEvent({\n            id: createEventId(),\n            title,\n            start: selectInfo.startStr,\n            end: selectInfo.endStr,\n            allDay: selectInfo.allDay\n          })\n        }\n      }\n    \n      handleEventClick = (clickInfo) => {\n        if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n          clickInfo.event.remove()\n        }\n      }\n    \n      handleEvents = (events) => {\n        this.setState({\n          currentEvents: events\n        })\n      }\n    \n    }\n    \n    function renderEventContent(eventInfo) {\n      return (\n        <>\n          <b>{eventInfo.timeText}</b>\n          <i>{eventInfo.event.title}</i>\n        </>\n      )\n    }  ","import React from 'react';\nimport './index.css';\nimport Calendar from './MyCalendar'\nimport {render} from 'react-dom'\nimport CustomerAdd from './Customeradd'\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  render(\n    <Calendar />,\n    document.body.appendChild(document.createElement('div'))\n  )\n  render(\n    <CustomerAdd />,\n    document.body.appendChild(document.createElement('div'))\n  )  \n})"],"sourceRoot":""}